# This is a basic workflow to help you get started with Actions

name: CI

# Controls when the workflow will run
on:
  # Triggers the workflow on push or pull request events but only for the main branch
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]
# Environment  variables available to all jobs and steps in this workflow   
env:
  REGISTRY_NAME: githubtestingreg.azurecr.io
  APP_NAME: spring-app
  CLUSTER_NAME: my-kc
  CLUSTER_RESOURCE_GROUP: my-first-rg
  NAMESPACE: spring-java-apps
  SECRET: akspullsecret
  IMG_TAG: v1

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  # This workflow contains a single job called "build"
  build:
    # The type of runner that the job will run on
    runs-on: ubuntu-latest

    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      - uses: actions/checkout@v2
      
      - name: 'Login via Azure CLI'
        uses: azure/login@v1
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}
          
      - name: 'Connect to AKV'
        uses: Azure/get-keyvault-secrets@v1
        with:
          keyvault: "my-first-akv1"
          secrets: 'REGISTRY-USERNAME, REGISTRY-PASSWORD'
        id: myGetSecretAction
        
      - name: Build and push
        uses: azure/docker-login@v1
        with:
          login-server: ${{ env.REGISTRY_NAME }}
          username: ${{ steps.myGetSecretAction.outputs.REGISTRY-USERNAME }} 
          password: ${{ steps.myGetSecretAction.outputs.REGISTRY-PASSWORD }}

      # Runs a single command using the runners shell
      - name: Run a one-line script
        run: echo Hello, world!

      # Runs a set of commands using the runners shell
      - name: Build a Docker Image
        run: | 
          docker build . --file Dockerfile --tag ${{ env.REGISTRY_NAME }}/${{ env.APP_NAME }}:${{ github.sha }}
          docker push  ${{ env.REGISTRY_NAME }}/${{ env.APP_NAME }}:${{ github.sha }}
       
      - name: Set the target Azure Kubernetes Service (AKS) cluster
        uses: azure/aks-set-context@v1
        with:
          creds: '${{ secrets.AZURE_CREDENTIALS }}'
          cluster-name: ${{ env.CLUSTER_NAME }}
          resource-group: ${{ env.CLUSTER_RESOURCE_GROUP }}
          
     # Create namespace if doesn't exist
      - run: |
          kubectl create namespace ${{ env.NAMESPACE }} --dry-run -o json | kubectl apply -f -
          
    # Create image pull secret for ACR
      - uses: azure/k8s-create-secret@v1
        with:
          container-registry-url: ${{ env.REGISTRY_NAME }}
          container-registry-username: ${{ steps.myGetSecretAction.outputs.REGISTRY-USERNAME }} 
          container-registry-password: ${{ steps.myGetSecretAction.outputs.REGISTRY-PASSWORD }} 
          secret-name: ${{ env.SECRET }}
          namespace: ${{ env.NAMESPACE }}
          force: true
          
    # Deploy app to AKS
      - uses: azure/k8s-deploy@v1
        with:
          manifests: |
            Deployment.yml
          images: | 
            githubtestingreg.azurecr.io/spring-app:${{ github.sha }}
          imagepullsecrets: |
            ${{ env.SECRET }}
          namespace: ${{ env.NAMESPACE }}      
     
        
